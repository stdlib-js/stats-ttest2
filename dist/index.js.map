{
  "version": 3,
  "sources": ["../lib/validate.js", "../lib/print.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.difference] - difference in means under H0\n* @param {string} [options.variance] - whether variances are `equal` or `unequal` under H0\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'alternative', opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'difference' ) ) {\n\t\topts.difference = options.difference;\n\t\tif ( !isNumber( opts.difference ) || isnan( opts.difference ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'difference', opts.difference ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'variance' ) ) {\n\t\topts.variance = options.variance;\n\t\tif ( !isString( opts.variance ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'variance', opts.variance ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar roundn = require( '@stdlib/math-base-special-roundn' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tstr += 'True difference in means is ';\n\tswitch ( this.alternative ) {\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    df: ' + roundn( this.df, -dgts ) + '\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumberArray = require( '@stdlib/assert-is-number-array' ).primitives;\nvar isTypedArrayLike = require( '@stdlib/assert-is-typed-array-like' );\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\nvar tCDF = require( '@stdlib/stats-base-dists-t-cdf' );\nvar tQuantile = require( '@stdlib/stats-base-dists-t-quantile' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar mean = require( '@stdlib/stats-strided-mean' );\nvar variance = require( '@stdlib/stats-strided-variance' );\nvar format = require( '@stdlib/string-format' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar validate = require( './validate.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Computes a two-sample Student's t test.\n*\n* @param {NumericArray} x - first data array\n* @param {NumericArray} y - second data array\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.difference=0] - difference in means under H0\n* @param {string} [options.variance='unequal'] - whether variances are `equal` or `unequal` under H0\n* @throws {TypeError} x argument has to be a typed array or array of numbers\n* @throws {TypeError} y argument has to be a typed array or array of numbers\n* @throws {TypeError} options must be an object\n* @throws {TypeError} alpha option has to be a number\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {TypeError} alternative option has to be a string\n* @throws {Error} alternative option must be `two-sided`, `less` or `greater`\n* @throws {TypeError} difference option has to be a number\n* @throws {TypeError} variance option has to be a string\n* @throws {Error} variance option must be `equal` or `unequal`\n* @returns {Object} test result object\n*/\nfunction ttest2( x, y, options ) {\n\tvar stderr;\n\tvar alpha;\n\tvar xmean;\n\tvar ymean;\n\tvar vars;\n\tvar cint;\n\tvar diff;\n\tvar opts;\n\tvar pval;\n\tvar xvar;\n\tvar yvar;\n\tvar stat;\n\tvar sdx;\n\tvar sdy;\n\tvar alt;\n\tvar err;\n\tvar out;\n\tvar nx;\n\tvar ny;\n\tvar df;\n\tvar v;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a numeric array. Value: `%s`.', x ) );\n\t}\n\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a numeric array. Value: `%s`.', y ) );\n\t}\n\topts = {};\n\tif ( options ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tdiff = opts.difference || 0.0;\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be a number on the interval: [0, 1]. Option: `%f`.', 'alpha', alpha ) );\n\t}\n\tnx = x.length;\n\tny = y.length;\n\n\txvar = variance( nx, 1, x, 1 );\n\tyvar = variance( ny, 1, y, 1 );\n\n\tvars = opts.variance || 'unequal';\n\tif ( vars === 'equal' ) {\n\t\tdf = nx + ny - 2;\n\t\tv = ((nx-1) * xvar) + ((ny-1) * yvar);\n\t\tv /= df;\n\t\tstderr = sqrt( v * ((1/nx) + (1/ny)) );\n\t}\n\telse if ( vars === 'unequal' ) {\n\t\tsdx = sqrt( xvar/nx );\n\t\tsdy = sqrt( yvar/ny );\n\t\tstderr = sqrt( (sdx*sdx) + (sdy*sdy) );\n\t\tv = pow( sdx, 4 ) / ( nx - 1 );\n\t\tv += pow( sdy, 4 ) / ( ny - 1 );\n\t\tdf = pow( stderr, 4 ) / v;\n\t}\n\telse {\n\t\tthrow new Error( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'variance', [ 'equal', 'unequal' ].join( '\", \"' ), vars ) );\n\t}\n\n\txmean = mean( nx, x, 1 );\n\tymean = mean( ny, y, 1 );\n\tstat = ( xmean - ymean - diff ) / stderr;\n\n\talt = opts.alternative || 'two-sided';\n\tswitch ( alt ) {\n\tcase 'two-sided':\n\t\tpval = 2.0 * tCDF( -abs(stat), df );\n\t\tcint = [\n\t\t\tstat - tQuantile( 1.0-(alpha/2.0), df ),\n\t\t\tstat + tQuantile( 1.0-(alpha/2.0), df )\n\t\t];\n\t\tcint[ 0 ] = diff + (cint[ 0 ] * stderr);\n\t\tcint[ 1 ] = diff + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tcase 'greater':\n\t\tpval = 1.0 - tCDF( stat, df );\n\t\tcint = [ stat - tQuantile( 1.0-alpha, df ), PINF ];\n\t\tcint[ 0 ] = diff + (cint[ 0 ] * stderr);\n\t\tbreak;\n\tcase 'less':\n\t\tpval = tCDF( stat, df );\n\t\tcint = [ NINF, stat + tQuantile( 1.0-alpha, df ) ];\n\t\tcint[ 1 ] = diff + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'alternative', [ 'two-sided', 'less', 'greater' ].join( '\", \"' ), alt ) );\n\t}\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'df', df );\n\tsetReadOnly( out, 'method', ( vars === 'equal' ) ? 'Two-sample t-test' : 'Welch two-sample t-test' );\n\tsetReadOnly( out, 'nullValue', diff );\n\tsetReadOnly( out, 'xmean', xmean );\n\tsetReadOnly( out, 'ymean', ymean );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ttest2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a two-sample Student's t-Test.\n*\n* @module @stdlib/stats-ttest2\n*\n* @example\n* var incrspace = require( '@stdlib/array-base-incrspace' );\n* var ttest2 = require( '@stdlib/stats-ttest2' );\n*\n* var a = incrspace( 1, 11, 1 );\n* var b = incrspace( 7, 21, 1 );\n*\n* var out = ttest2( a, b );\n* var table = out.print();\n*/\n\n// MODULES //\n\nvar ttest2 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = ttest2;\n"],
  "mappings": "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",
  "names": ["require_validate", "__commonJSMin", "exports", "module", "isNumber", "isObject", "isString", "isnan", "hasOwnProp", "format", "validate", "opts", "options", "require_print", "__commonJSMin", "exports", "module", "isPositiveInteger", "isObject", "isBoolean", "hasOwnProp", "roundn", "format", "print", "opts", "decision", "dgts", "str", "require_main", "__commonJSMin", "exports", "module", "isNumberArray", "isTypedArrayLike", "setReadOnly", "tCDF", "tQuantile", "sqrt", "abs", "pow", "mean", "variance", "format", "NINF", "PINF", "validate", "print", "ttest2", "x", "y", "options", "stderr", "alpha", "xmean", "ymean", "vars", "cint", "diff", "opts", "pval", "xvar", "yvar", "stat", "sdx", "sdy", "alt", "err", "out", "nx", "ny", "df", "v", "ttest2"]
}
