{"version":3,"file":"index.mjs","sources":["../lib/print.js","../lib/main.js","../lib/validate.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/assert-is-positive-integer' ;\nimport isObject from '@stdlib/assert-is-plain-object' ;\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean' ;\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport roundn from '@stdlib/math-base-special-roundn' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( '0fq3X', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( '0fq3b', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( '0fq30', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tstr += 'True difference in means is ';\n\tswitch ( this.alternative ) {\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    df: ' + roundn( this.df, -dgts ) + '\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { primitives as isNumberArray } from '@stdlib/assert-is-number-array' ;\nimport isTypedArrayLike from '@stdlib/assert-is-typed-array-like' ;\nimport setReadOnly from '@stdlib/utils-define-read-only-property' ;\nimport tCDF from '@stdlib/stats-base-dists-t-cdf' ;\nimport tQuantile from '@stdlib/stats-base-dists-t-quantile' ;\nimport sqrt from '@stdlib/math-base-special-sqrt' ;\nimport abs from '@stdlib/math-base-special-abs' ;\nimport pow from '@stdlib/math-base-special-pow' ;\nimport mean from '@stdlib/stats-base-mean' ;\nimport variance from '@stdlib/stats-base-variance' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport NINF from '@stdlib/constants-float64-ninf' ;\nimport PINF from '@stdlib/constants-float64-pinf' ;\nimport validate from './validate.js' ;\nimport print from './print.js' ; // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Computes a two-sample Student's t test.\n*\n* @param {NumericArray} x - first data array\n* @param {NumericArray} y - second data array\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.difference=0] - difference in means under H0\n* @param {string} [options.variance='unequal'] - whether variances are `equal` or `unequal` under H0\n* @throws {TypeError} x argument has to be a typed array or array of numbers\n* @throws {TypeError} y argument has to be a typed array or array of numbers\n* @throws {TypeError} options must be an object\n* @throws {TypeError} alpha option has to be a number\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {TypeError} alternative option has to be a string\n* @throws {Error} alternative option must be `two-sided`, `less` or `greater`\n* @throws {TypeError} difference option has to be a number\n* @throws {TypeError} variance option has to be a string\n* @throws {Error} variance option must be `equal` or `unequal`\n* @returns {Object} test result object\n*/\nfunction ttest2( x, y, options ) {\n\tvar stderr;\n\tvar alpha;\n\tvar xmean;\n\tvar ymean;\n\tvar vars;\n\tvar cint;\n\tvar diff;\n\tvar opts;\n\tvar pval;\n\tvar xvar;\n\tvar yvar;\n\tvar stat;\n\tvar sdx;\n\tvar sdy;\n\tvar alt;\n\tvar err;\n\tvar out;\n\tvar nx;\n\tvar ny;\n\tvar df;\n\tvar v;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( format( '0fq8j', x ) );\n\t}\n\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\tthrow new TypeError( format( '0fqAa', y ) );\n\t}\n\topts = {};\n\tif ( options ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tdiff = opts.difference || 0.0;\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be a number on the interval: [0, 1]. Option: `%f`.', 'alpha', alpha ) );\n\t}\n\tnx = x.length;\n\tny = y.length;\n\n\txvar = variance( nx, 1, x, 1 );\n\tyvar = variance( ny, 1, y, 1 );\n\n\tvars = opts.variance || 'unequal';\n\tif ( vars === 'equal' ) {\n\t\tdf = nx + ny - 2;\n\t\tv = ((nx-1) * xvar) + ((ny-1) * yvar);\n\t\tv /= df;\n\t\tstderr = sqrt( v * ((1/nx) + (1/ny)) );\n\t}\n\telse if ( vars === 'unequal' ) {\n\t\tsdx = sqrt( xvar/nx );\n\t\tsdy = sqrt( yvar/ny );\n\t\tstderr = sqrt( (sdx*sdx) + (sdy*sdy) );\n\t\tv = pow( sdx, 4 ) / ( nx - 1 );\n\t\tv += pow( sdy, 4 ) / ( ny - 1 );\n\t\tdf = pow( stderr, 4 ) / v;\n\t}\n\telse {\n\t\tthrow new Error( format( '0fq3t', 'variance', [ 'equal', 'unequal' ].join( '\", \"' ), vars ) );\n\t}\n\n\txmean = mean( nx, x, 1 );\n\tymean = mean( ny, y, 1 );\n\tstat = ( xmean - ymean - diff ) / stderr;\n\n\talt = opts.alternative || 'two-sided';\n\tswitch ( alt ) {\n\tcase 'two-sided':\n\t\tpval = 2.0 * tCDF( -abs(stat), df );\n\t\tcint = [\n\t\t\tstat - tQuantile( 1.0-(alpha/2.0), df ),\n\t\t\tstat + tQuantile( 1.0-(alpha/2.0), df )\n\t\t];\n\t\tcint[ 0 ] = diff + (cint[ 0 ] * stderr);\n\t\tcint[ 1 ] = diff + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tcase 'greater':\n\t\tpval = 1.0 - tCDF( stat, df );\n\t\tcint = [ stat - tQuantile( 1.0-alpha, df ), PINF ];\n\t\tcint[ 0 ] = diff + (cint[ 0 ] * stderr);\n\t\tbreak;\n\tcase 'less':\n\t\tpval = tCDF( stat, df );\n\t\tcint = [ NINF, stat + tQuantile( 1.0-alpha, df ) ];\n\t\tcint[ 1 ] = diff + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( format( '0fq3t', 'alternative', [ 'two-sided', 'less', 'greater' ].join( '\", \"' ), alt ) );\n\t}\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'df', df );\n\tsetReadOnly( out, 'method', ( vars === 'equal' ) ? 'Two-sample t-test' : 'Welch two-sample t-test' );\n\tsetReadOnly( out, 'nullValue', diff );\n\tsetReadOnly( out, 'xmean', xmean );\n\tsetReadOnly( out, 'ymean', ymean );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default ttest2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number' ;\nimport isObject from '@stdlib/assert-is-plain-object' ;\nimport { isPrimitive as isString } from '@stdlib/assert-is-string' ;\nimport isnan from '@stdlib/assert-is-nan' ;\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.difference] - difference in means under H0\n* @param {string} [options.variance] - whether variances are `equal` or `unequal` under H0\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '0fq2h', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( '0fq8h', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( '0fq2i', 'alternative', opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'difference' ) ) {\n\t\topts.difference = options.difference;\n\t\tif ( !isNumber( opts.difference ) || isnan( opts.difference ) ) {\n\t\t\treturn new TypeError( format( '0fq8h', 'difference', opts.difference ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'variance' ) ) {\n\t\topts.variance = options.variance;\n\t\tif ( !isString( opts.variance ) ) {\n\t\t\treturn new TypeError( format( '0fq2i', 'variance', opts.variance ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n"],"names":["print","opts","decision","dgts","str","arguments","length","isObject","TypeError","format","hasOwnProp","isPositiveInteger","digits","isBoolean","this","method","alternative","nullValue","roundn","pValue","statistic","df","alpha","ci","rejected","ttest2","x","y","options","stderr","xmean","ymean","vars","cint","diff","pval","xvar","yvar","stat","sdx","sdy","alt","err","out","nx","ny","v","isTypedArrayLike","isNumberArray","isNumber","isnan","isString","difference","variance","validate","RangeError","sqrt","Error","join","pow","mean","tCDF","abs","tQuantile","PINF","NINF","setReadOnly"],"mappings":"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"}