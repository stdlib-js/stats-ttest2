{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/print.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.difference] - difference in means under H0\n* @param {string} [options.variance] - whether variances are `equal` or `unequal` under H0\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'alternative', opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'difference' ) ) {\n\t\topts.difference = options.difference;\n\t\tif ( !isNumber( opts.difference ) || isnan( opts.difference ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'difference', opts.difference ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'variance' ) ) {\n\t\topts.variance = options.variance;\n\t\tif ( !isString( opts.variance ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'variance', opts.variance ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar roundn = require( '@stdlib/math-base-special-roundn' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an options object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tstr += 'True difference in means is ';\n\tswitch ( this.alternative ) {\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    df: ' + roundn( this.df, -dgts ) + '\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumberArray = require( '@stdlib/assert-is-number-array' ).primitives;\nvar isTypedArrayLike = require( '@stdlib/assert-is-typed-array-like' );\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\nvar tCDF = require( '@stdlib/stats-base-dists-t-cdf' );\nvar tQuantile = require( '@stdlib/stats-base-dists-t-quantile' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar mean = require( '@stdlib/stats-base-mean' );\nvar variance = require( '@stdlib/stats-base-variance' );\nvar format = require( '@stdlib/string-format' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar validate = require( './validate.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Computes a two-sample Student's t test.\n*\n* @param {NumericArray} x - first data array\n* @param {NumericArray} y - second data array\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.difference=0] - difference in means under H0\n* @param {string} [options.variance='unequal'] - whether variances are `equal` or `unequal` under H0\n* @throws {TypeError} x argument has to be a typed array or array of numbers\n* @throws {TypeError} y argument has to be a typed array or array of numbers\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} alpha option has to be a number\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {TypeError} alternative option has to be a string\n* @throws {Error} alternative option must be `two-sided`, `less` or `greater`\n* @throws {TypeError} difference option has to be a number\n* @throws {TypeError} variance option has to be a string\n* @throws {Error} variance option must be `equal` or `unequal`\n* @returns {Object} test result object\n*/\nfunction ttest2( x, y, options ) {\n\tvar stderr;\n\tvar alpha;\n\tvar xmean;\n\tvar ymean;\n\tvar vars;\n\tvar cint;\n\tvar diff;\n\tvar opts;\n\tvar pval;\n\tvar xvar;\n\tvar yvar;\n\tvar stat;\n\tvar sdx;\n\tvar sdy;\n\tvar alt;\n\tvar err;\n\tvar out;\n\tvar nx;\n\tvar ny;\n\tvar df;\n\tvar v;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument `x` must be a numeric array. Value: `%s`.', x ) );\n\t}\n\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument `y` must be a numeric array. Value: `%s`.', y ) );\n\t}\n\topts = {};\n\tif ( options ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tdiff = opts.difference || 0.0;\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Option `alpha` must be a number in the range 0 to 1. Value: `%f`.', alpha ) );\n\t}\n\tnx = x.length;\n\tny = y.length;\n\n\txvar = variance( nx, 1, x, 1 );\n\tyvar = variance( ny, 1, y, 1 );\n\n\tvars = opts.variance || 'unequal';\n\tif ( vars === 'equal' ) {\n\t\tdf = nx + ny - 2;\n\t\tv = ((nx-1) * xvar) + ((ny-1) * yvar);\n\t\tv /= df;\n\t\tstderr = sqrt( v * ((1/nx) + (1/ny)) );\n\t}\n\telse if ( vars === 'unequal' ) {\n\t\tsdx = sqrt( xvar/nx );\n\t\tsdy = sqrt( yvar/ny );\n\t\tstderr = sqrt( (sdx*sdx) + (sdy*sdy) );\n\t\tv = pow( sdx, 4 ) / ( nx - 1 );\n\t\tv += pow( sdy, 4 ) / ( ny - 1 );\n\t\tdf = pow( stderr, 4 ) / v;\n\t}\n\telse {\n\t\tthrow new Error( format( 'Invalid option. `variance` must be either `equal` or `unequal`. Value: `%s`.', vars ) );\n\t}\n\n\txmean = mean( nx, x, 1 );\n\tymean = mean( ny, y, 1 );\n\tstat = ( xmean - ymean - diff ) / stderr;\n\n\talt = opts.alternative || 'two-sided';\n\tswitch ( alt ) {\n\tcase 'two-sided':\n\t\tpval = 2.0 * tCDF( -abs(stat), df );\n\t\tcint = [\n\t\t\tstat - tQuantile( 1.0-(alpha/2.0), df ),\n\t\t\tstat + tQuantile( 1.0-(alpha/2.0), df )\n\t\t];\n\t\tcint[ 0 ] = diff + (cint[ 0 ] * stderr);\n\t\tcint[ 1 ] = diff + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tcase 'greater':\n\t\tpval = 1.0 - tCDF( stat, df );\n\t\tcint = [ stat - tQuantile( 1.0-alpha, df ), PINF ];\n\t\tcint[ 0 ] = diff + (cint[ 0 ] * stderr);\n\t\tbreak;\n\tcase 'less':\n\t\tpval = tCDF( stat, df );\n\t\tcint = [ NINF, stat + tQuantile( 1.0-alpha, df ) ];\n\t\tcint[ 1 ] = diff + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( format( 'Invalid option. `alternative` must be either `two-sided`, `less`, or `greater`. Value: `%s`.', alt ) );\n\t}\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'df', df );\n\tsetReadOnly( out, 'method', ( vars === 'equal' ) ? 'Two-sample t-test' : 'Welch two-sample t-test' );\n\tsetReadOnly( out, 'nullValue', diff );\n\tsetReadOnly( out, 'xmean', xmean );\n\tsetReadOnly( out, 'ymean', ymean );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ttest2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a two-sample Student's t-Test.\n*\n* @module @stdlib/stats-ttest2\n*\n* @example\n* var ttest2 = require( '@stdlib/stats-ttest2' );\n* var incrspace = require( '@stdlib/array-base-incrspace' );\n*\n* var a = incrspace( 1, 11, 1 );\n* var b = incrspace( 7, 21, 1 );\n*\n* var out = ttest2( a, b );\n* var table = out.print();\n*/\n\n// MODULES //\n\nvar ttest2 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = ttest2;\n"],"names":["isNumber","require$$0","isPrimitive","isObject","require$$1","isString","require$$2","isnan","require$$3","hasOwnProp","require$$4","format","require$$5","validate_1","opts","options","alpha","TypeError","alternative","difference","variance","isPositiveInteger","isBoolean","roundn","print_1","decision","dgts","str","arguments","length","digits","this","method","nullValue","pValue","statistic","df","ci","rejected","isNumberArray","primitives","isTypedArrayLike","setReadOnly","tCDF","tQuantile","sqrt","abs","require$$6","pow","require$$7","mean","require$$8","require$$9","require$$10","NINF","require$$11","PINF","require$$12","validate","require$$13","print","require$$14","lib","x","y","stderr","xmean","ymean","vars","cint","diff","pval","xvar","yvar","stat","sdx","sdy","alt","err","out","nx","ny","v","RangeError","Error"],"mappings":"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"}